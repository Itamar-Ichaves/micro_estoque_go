// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: categories.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
  token_company,
  title,
  description
) VALUES (
  $1, $2, $3
) RETURNING id, token_company, title, description, created_at
`

type CreateCategoryParams struct {
	TokenCompany string `json:"token_company"`
	Title        string `json:"title"`
	Description  string `json:"description"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.TokenCompany, arg.Title, arg.Description)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.TokenCompany,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCategories = `-- name: DeleteCategories :exec
DELETE FROM categories
WHERE id = $1 AND token_company = $2
`

type DeleteCategoriesParams struct {
	ID           int32  `json:"id"`
	TokenCompany string `json:"token_company"`
}

func (q *Queries) DeleteCategories(ctx context.Context, arg DeleteCategoriesParams) error {
	_, err := q.db.ExecContext(ctx, deleteCategories, arg.ID, arg.TokenCompany)
	return err
}

const getCategories = `-- name: GetCategories :many
SELECT id, token_company, title, description, created_at FROM categories
WHERE token_company = $1 AND title = $2
AND
  LOWER(title) LIKE CONCAT('%', LOWER($3::text), '%')
`

type GetCategoriesParams struct {
	TokenCompany string `json:"token_company"`
	Title        string `json:"title"`
	Title_2      string `json:"title_2"`
}

func (q *Queries) GetCategories(ctx context.Context, arg GetCategoriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategories, arg.TokenCompany, arg.Title, arg.Title_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.TokenCompany,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesAll = `-- name: GetCategoriesAll :many
SELECT id, token_company, title, description, created_at FROM categories
WHERE
token_company = $1
`

func (q *Queries) GetCategoriesAll(ctx context.Context, tokenCompany string) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategoriesAll, tokenCompany)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.TokenCompany,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryById = `-- name: GetCategoryById :one
SELECT id, token_company, title, description, created_at FROM categories
WHERE token_company = $1 AND id = $1 LIMIT 1
`

func (q *Queries) GetCategoryById(ctx context.Context, tokenCompany string) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryById, tokenCompany)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.TokenCompany,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const updateCategories = `-- name: UpdateCategories :one
UPDATE categories
SET title = $2, description = $3
WHERE id = $1 AND token_company = $4
RETURNING id, token_company, title, description, created_at
`

type UpdateCategoriesParams struct {
	ID           int32  `json:"id"`
	Title        string `json:"title"`
	Description  string `json:"description"`
	TokenCompany string `json:"token_company"`
}

func (q *Queries) UpdateCategories(ctx context.Context, arg UpdateCategoriesParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategories,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.TokenCompany,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.TokenCompany,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
